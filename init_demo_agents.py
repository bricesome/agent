#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script d'initialisation des agents de d√©monstration pour les workflows
"""

import json
import os
from datetime import datetime

def init_demo_agents():
    """Initialise les agents de d√©monstration pour les workflows"""
    
    # V√©rifier si le fichier agents.json existe d√©j√†
    if os.path.exists('agents.json'):
        print("‚ö†Ô∏è Le fichier agents.json existe d√©j√†.")
        response = input("Voulez-vous le remplacer ? (o/n): ")
        if response.lower() not in ['o', 'oui', 'y', 'yes']:
            print("‚ùå Initialisation annul√©e.")
            return
    
    # Agents de d√©monstration pour les workflows
    demo_agents = [
        {
            "id": "agent_classification_demo",
            "name": "Agent Classification",
            "domain": "Support Client",
            "type": "Classification",
            "model": "GPT-4",
            "system_prompt": "Tu es un agent sp√©cialis√© dans la classification automatique des probl√®mes clients. Tu analyses les descriptions et les classe selon leur type, priorit√© et urgence.",
            "status": "active",
            "created_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "executions": []
        },
        {
            "id": "agent_diagnostic_demo",
            "name": "Agent Diagnostic",
            "domain": "Support Client",
            "type": "Diagnostic",
            "model": "Claude-3",
            "system_prompt": "Tu es un agent expert en diagnostic de probl√®mes. Tu analyses en profondeur les probl√®mes classifi√©s pour identifier les causes racines et les impacts.",
            "status": "active",
            "created_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "executions": []
        },
        {
            "id": "agent_solution_demo",
            "name": "Agent Solution",
            "domain": "Support Client",
            "type": "Solution",
            "model": "Gemini Pro",
            "system_prompt": "Tu es un agent sp√©cialis√© dans la proposition de solutions. Tu proposes des solutions adapt√©es et des proc√©dures de r√©solution bas√©es sur le diagnostic.",
            "status": "active",
            "created_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "executions": []
        },
        {
            "id": "agent_suivi_demo",
            "name": "Agent Suivi",
            "domain": "Support Client",
            "type": "Suivi",
            "model": "GPT-4",
            "system_prompt": "Tu es un agent de suivi et de v√©rification. Tu planifies les actions de suivi et v√©rifies la r√©solution des probl√®mes.",
            "status": "active",
            "created_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "executions": []
        },
        {
            "id": "agent_collecte_demo",
            "name": "Agent Collecte",
            "domain": "Finance",
            "type": "Collecte",
            "model": "Claude-3",
            "system_prompt": "Tu es un agent sp√©cialis√© dans la collecte de donn√©es financi√®res. Tu r√©cup√®res et valides les informations financi√®res n√©cessaires √† l'analyse.",
            "status": "active",
            "created_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "executions": []
        },
        {
            "id": "agent_analyse_demo",
            "name": "Agent Analyse",
            "domain": "Finance",
            "type": "Analyse",
            "model": "Gemini Pro",
            "system_prompt": "Tu es un agent expert en analyse financi√®re. Tu analyses les donn√©es collect√©es pour identifier les tendances et les insights.",
            "status": "active",
            "created_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "executions": []
        },
        {
            "id": "agent_rapport_demo",
            "name": "Agent Rapport",
            "domain": "Finance",
            "type": "Rapport",
            "model": "GPT-4",
            "system_prompt": "Tu es un agent sp√©cialis√© dans la g√©n√©ration de rapports financiers. Tu cr√©es des rapports clairs et structur√©s bas√©s sur l'analyse.",
            "status": "active",
            "created_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "executions": []
        }
    ]
    
    # Sauvegarder les agents de d√©monstration
    try:
        with open('agents.json', 'w', encoding='utf-8') as f:
            json.dump(demo_agents, f, ensure_ascii=False, indent=2)
        
        print("‚úÖ Agents de d√©monstration initialis√©s avec succ√®s !")
        print(f"ü§ñ {len(demo_agents)} agents cr√©√©s :")
        
        for agent in demo_agents:
            print(f"   ü§ñ {agent['name']} ({agent['domain']} - {agent['type']})")
        
        print("\nüöÄ Vous pouvez maintenant cr√©er et tester des workflows avec ces agents !")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'initialisation : {e}")

if __name__ == "__main__":
    print("ü§ñ Initialisation des Agents de D√©monstration")
    print("=" * 50)
    init_demo_agents()


