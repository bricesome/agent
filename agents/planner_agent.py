# ü§ñ Agent Planificateur de T√¢ches
# Agent sp√©cialis√© dans la planification et l'ex√©cution automatique de t√¢ches

import json
import os
from datetime import datetime, timedelta
import schedule
import time
import threading
from typing import Dict, List, Any, Optional
import logging

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class PlannerAgent:
    """Agent planificateur de t√¢ches avanc√©"""
    
    def __init__(self):
        self.agent_id = "planner_agent_system"
        self.name = "ÔøΩÔøΩ Planificateur de T√¢ches"
        self.description = "Agent sp√©cialis√© dans la planification et l'ex√©cution automatique de t√¢ches"
        self.version = "1.0.0"
        self.tasks_file = "data/planned_tasks.json"
        self.scheduler_running = False
        
        # Cr√©er le r√©pertoire de donn√©es s'il n'existe pas
        os.makedirs("data", exist_ok=True)
        
        # Charger les t√¢ches existantes
        self.planned_tasks = self._load_tasks()
        
        # D√©marrer le planificateur en arri√®re-plan
        self._start_scheduler()
    
    def _load_tasks(self) -> List[Dict[str, Any]]:
        """Charge les t√¢ches planifi√©es depuis le fichier JSON"""
        try:
            if os.path.exists(self.tasks_file):
                with open(self.tasks_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            return []
        except Exception as e:
            logger.error(f"Erreur lors du chargement des t√¢ches: {e}")
            return []
    
    def _save_tasks(self):
        """Sauvegarde les t√¢ches planifi√©es dans le fichier JSON"""
        try:
            with open(self.tasks_file, 'w', encoding='utf-8') as f:
                json.dump(self.planned_tasks, f, indent=2, ensure_ascii=False)
        except Exception as e:
            logger.error(f"Erreur lors de la sauvegarde des t√¢ches: {e}")
    
    def _start_scheduler(self):
        """D√©marre le planificateur en arri√®re-plan"""
        if not self.scheduler_running:
            self.scheduler_running = True
            scheduler_thread = threading.Thread(target=self._run_scheduler, daemon=True)
            scheduler_thread.start()
            logger.info("üîÑ Planificateur de t√¢ches d√©marr√©")
    
    def _run_scheduler(self):
        """Ex√©cute le planificateur en continu"""
        while self.scheduler_running:
            try:
                schedule.run_pending()
                time.sleep(1)
            except Exception as e:
                logger.error(f"Erreur dans le planificateur: {e}")
                time.sleep(5)
    
    def plan_task(self, task_config: Dict[str, Any]) -> Dict[str, Any]:
        """Planifie une nouvelle t√¢che"""
        try:
            # G√©n√©rer un ID unique pour la t√¢che
            task_id = f"task_{datetime.now().strftime('%Y%m%d_%H%M%S')}_{len(self.planned_tasks)}"
            
            # Cr√©er la t√¢che
            task = {
                "id": task_id,
                "name": task_config.get("name", "T√¢che sans nom"),
                "description": task_config.get("description", ""),
                "type": task_config.get("type", "agent_execution"),
                "schedule_type": task_config.get("schedule_type", "datetime"),
                "schedule_config": task_config.get("schedule_config", {}),
                "target": task_config.get("target", {}),
                "status": "planned",
                "created_at": datetime.now().isoformat(),
                "next_execution": None,
                "last_execution": None,
                "execution_count": 0,
                "max_executions": task_config.get("max_executions", -1),  # -1 = illimit√©
                "enabled": True
            }
            
            # Configurer la planification selon le type
            if task["schedule_type"] == "datetime":
                self._schedule_datetime_task(task)
            elif task["schedule_type"] == "recurring":
                self._schedule_recurring_task(task)
            elif task["schedule_type"] == "conditional":
                self._schedule_conditional_task(task)
            elif task["schedule_type"] == "seasonal":
                self._schedule_seasonal_task(task)
            
            # Ajouter la t√¢che √† la liste
            self.planned_tasks.append(task)
            self._save_tasks()
            
            logger.info(f"‚úÖ T√¢che '{task['name']}' planifi√©e avec succ√®s (ID: {task_id})")
            
            return {
                "success": True,
                "task_id": task_id,
                "message": f"T√¢che '{task['name']}' planifi√©e avec succ√®s",
                "next_execution": task["next_execution"]
            }
            
        except Exception as e:
            logger.error(f"Erreur lors de la planification de la t√¢che: {e}")
            return {
                "success": False,
                "error": str(e)
            }
    
    def _schedule_datetime_task(self, task: Dict[str, Any]):
        """Planifie une t√¢che √† une date/heure pr√©cise"""
        schedule_config = task["schedule_config"]
        target_datetime = datetime.fromisoformat(schedule_config["datetime"])
        
        # Planifier la t√¢che
        schedule.every().day.at(target_datetime.strftime("%H:%M")).do(
            self._execute_task, task["id"]
        ).tag(task["id"])
        
        task["next_execution"] = target_datetime.isoformat()
    
    def _schedule_recurring_task(self, task: Dict[str, Any]):
        """Planifie une t√¢che r√©currente"""
        schedule_config = task["schedule_config"]
        frequency = schedule_config.get("frequency", "daily")
        
        if frequency == "daily":
            time_str = schedule_config.get("time", "09:00")
            schedule.every().day.at(time_str).do(
                self._execute_task, task["id"]
            ).tag(task["id"])
        
        elif frequency == "weekly":
            day = schedule_config.get("day", "monday")
            time_str = schedule_config.get("time", "09:00")
            getattr(schedule.every(), day).at(time_str).do(
                self._execute_task, task["id"]
            ).tag(task["id"])
        
        elif frequency == "monthly":
            day = schedule_config.get("day", 1)
            time_str = schedule_config.get("time", "09:00")
            schedule.every().month.at(time_str).do(
                self._execute_task, task["id"]
            ).tag(task["id"])
        
        elif frequency == "weekend":
            time_str = schedule_config.get("time", "10:00")
            schedule.every().saturday.at(time_str).do(
                self._execute_task, task["id"]
            ).tag(task["id"])
            schedule.every().sunday.at(time_str).do(
                self._execute_task, task["id"]
            ).tag(task["id"])
        
        # Calculer la prochaine ex√©cution
        task["next_execution"] = self._calculate_next_execution(task)
    
    def _schedule_conditional_task(self, task: Dict[str, Any]):
        """Planifie une t√¢che conditionnelle (√©v√©nement)"""
        # Pour les t√¢ches conditionnelles, on v√©rifie p√©riodiquement
        schedule.every(5).minutes.do(
            self._check_conditional_task, task["id"]
        ).tag(task["id"])
        
        task["next_execution"] = "Conditionnel"
    
    def _schedule_seasonal_task(self, task: Dict[str, Any]):
        """Planifie une t√¢che saisonni√®re"""
        schedule_config = task["schedule_config"]
        season = schedule_config.get("season", "spring")
        time_str = schedule_config.get("time", "09:00")
        
        # D√©finir les dates de d√©but de saison
        season_dates = {
            "spring": "03-21",
            "summer": "06-21", 
            "autumn": "09-21",
            "winter": "12-21"
        }
        
        if season in season_dates:
            schedule.every().year.at(season_dates[season]).at(time_str).do(
                self._execute_task, task["id"]
            ).tag(task["id"])
            
            task["next_execution"] = f"{datetime.now().year}-{season_dates[season]} {time_str}"
    
    def _calculate_next_execution(self, task: Dict[str, Any]) -> str:
        """Calcule la prochaine ex√©cution d'une t√¢che"""
        try:
            schedule_config = task["schedule_config"]
            frequency = schedule_config.get("frequency", "daily")
            time_str = schedule_config.get("time", "09:00")
            
            now = datetime.now()
            target_time = datetime.strptime(time_str, "%H:%M").time()
            
            if frequency == "daily":
                next_exec = datetime.combine(now.date(), target_time)
                if next_exec <= now:
                    next_exec += timedelta(days=1)
            
            elif frequency == "weekly":
                day = schedule_config.get("day", "monday")
                days = ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"]
                current_day = now.strftime("%A").lower()
                target_day_idx = days.index(day)
                current_day_idx = days.index(current_day)
                
                days_ahead = (target_day_idx - current_day_idx) % 7
                if days_ahead == 0 and now.time() > target_time:
                    days_ahead = 7
                
                next_exec = datetime.combine(now.date(), target_time) + timedelta(days=days_ahead)
            
            elif frequency == "weekend":
                # Prochain samedi
                days_until_saturday = (5 - now.weekday()) % 7
                if days_until_saturday == 0 and now.time() > target_time:
                    days_until_saturday = 7
                
                next_exec = datetime.combine(now.date(), target_time) + timedelta(days=days_until_saturday)
            
            else:
                next_exec = datetime.combine(now.date(), target_time)
            
            return next_exec.isoformat()
            
        except Exception as e:
            logger.error(f"Erreur lors du calcul de la prochaine ex√©cution: {e}")
            return "Erreur de calcul"
    
    def _check_conditional_task(self, task_id: str):
        """V√©rifie si une t√¢che conditionnelle doit √™tre ex√©cut√©e"""
        task = next((t for t in self.planned_tasks if t["id"] == task_id), None)
        if not task:
            return
        
        schedule_config = task["schedule_config"]
        condition = schedule_config.get("condition", {})
        
        # V√©rifier la condition (exemple: arriv√©e d'un email)
        if self._check_condition(condition):
            self._execute_task(task_id)
    
    def _check_condition(self, condition: Dict[str, Any]) -> bool:
        """V√©rifie si une condition est remplie"""
        condition_type = condition.get("type", "email")
        
        if condition_type == "email":
            # V√©rifier l'arriv√©e d'un email sp√©cifique
            email_subject = condition.get("email_subject", "")
            email_sender = condition.get("email_sender", "")
            
            # Ici tu peux impl√©menter la logique de v√©rification d'email
            # Pour l'instant, on simule
            return False
        
        elif condition_type == "file":
            # V√©rifier l'existence d'un fichier
            file_path = condition.get("file_path", "")
            return os.path.exists(file_path)
        
        elif condition_type == "time":
            # V√©rifier une condition temporelle
            time_condition = condition.get("time_condition", {})
            current_time = datetime.now().time()
            
            if "after" in time_condition:
                after_time = datetime.strptime(time_condition["after"], "%H:%M").time()
                if current_time < after_time:
                    return False
            
            if "before" in time_condition:
                before_time = datetime.strptime(time_condition["before"], "%H:%M").time()
                if current_time > before_time:
                    return False
            
            return True
        
        return False
    
    def _execute_task(self, task_id: str):
        """Ex√©cute une t√¢che planifi√©e"""
        task = next((t for t in self.planned_tasks if t["id"] == task_id), None)
        if not task or not task.get("enabled", True):
            return
        
        try:
            logger.info(f"ÔøΩÔøΩ Ex√©cution de la t√¢che '{task['name']}' (ID: {task_id})")
            
            # Mettre √† jour le statut
            task["status"] = "executing"
            task["last_execution"] = datetime.now().isoformat()
            task["execution_count"] += 1
            
            # Ex√©cuter la t√¢che selon son type
            if task["type"] == "agent_execution":
                self._execute_agent_task(task)
            elif task["type"] == "workflow_execution":
                self._execute_workflow_task(task)
            elif task["type"] == "email_send":
                self._execute_email_task(task)
            elif task["type"] == "file_operation":
                self._execute_file_task(task)
            elif task["type"] == "custom_action":
                self._execute_custom_task(task)
            
            # Mettre √† jour le statut
            task["status"] = "completed"
            
            # V√©rifier si la t√¢che doit √™tre r√©p√©t√©e
            if task["max_executions"] > 0 and task["execution_count"] >= task["max_executions"]:
                task["enabled"] = False
                logger.info(f"‚úÖ T√¢che '{task['name']}' termin√©e (limite atteinte)")
            else:
                # Replanifier si n√©cessaire
                if task["schedule_type"] in ["recurring", "seasonal"]:
                    task["next_execution"] = self._calculate_next_execution(task)
                    logger.info(f"‚úÖ T√¢che '{task['name']}' replanifi√©e")
                else:
                    task["enabled"] = False
                    logger.info(f"‚úÖ T√¢che '{task['name']}' termin√©e (ex√©cution unique)")
            
            self._save_tasks()
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'ex√©cution de la t√¢che '{task['name']}': {e}")
            task["status"] = "error"
            task["last_error"] = str(e)
            self._save_tasks()
    
    def _execute_agent_task(self, task: Dict[str, Any]):
        """Ex√©cute une t√¢che d'agent"""
        target = task["target"]
        agent_name = target.get("agent_name", "")
        
        logger.info(f"ü§ñ Ex√©cution de l'agent '{agent_name}'")
        
        # Ici tu peux impl√©menter l'ex√©cution r√©elle de l'agent
        # Pour l'instant, on simule
        time.sleep(2)
        
        logger.info(f"‚úÖ Agent '{agent_name}' ex√©cut√© avec succ√®s")
    
    def _execute_workflow_task(self, task: Dict[str, Any]):
        """Ex√©cute une t√¢che de workflow"""
        target = task["target"]
        workflow_name = target.get("workflow_name", "")
        
        logger.info(f"üîÑ Ex√©cution du workflow '{workflow_name}'")
        
        # Ici tu peux impl√©menter l'ex√©cution r√©elle du workflow
        # Pour l'instant, on simule
        time.sleep(3)
        
        logger.info(f"‚úÖ Workflow '{workflow_name}' ex√©cut√© avec succ√®s")
    
    def _execute_email_task(self, task: Dict[str, Any]):
        """Ex√©cute une t√¢che d'envoi d'email"""
        target = task["target"]
        recipients = target.get("recipients", [])
        subject = target.get("subject", "")
        
        logger.info(f"üìß Envoi d'email √† {len(recipients)} destinataires")
        
        # Ici tu peux impl√©menter l'envoi r√©el d'email
        # Pour l'instant, on simule
        time.sleep(1)
        
        logger.info(f"‚úÖ Email envoy√© avec succ√®s")
    
    def _execute_file_task(self, task: Dict[str, Any]):
        """Ex√©cute une t√¢che de manipulation de fichier"""
        target = task["target"]
        operation = target.get("operation", "")
        file_path = target.get("file_path", "")
        
        logger.info(f"üìÅ Op√©ration '{operation}' sur le fichier '{file_path}'")
        
        # Ici tu peux impl√©menter les op√©rations sur fichiers
        # Pour l'instant, on simule
        time.sleep(1)
        
        logger.info(f"‚úÖ Op√©ration fichier termin√©e avec succ√®s")
    
    def _execute_custom_task(self, task: Dict[str, Any]):
        """Ex√©cute une t√¢che personnalis√©e"""
        target = task["target"]
        action = target.get("action", "")
        
        logger.info(f"‚öôÔ∏è Ex√©cution de l'action personnalis√©e: {action}")
        
        # Ici tu peux impl√©menter des actions personnalis√©es
        # Pour l'instant, on simule
        time.sleep(1)
        
        logger.info(f"‚úÖ Action personnalis√©e ex√©cut√©e avec succ√®s")
    
    def get_tasks(self, status: Optional[str] = None) -> List[Dict[str, Any]]:
        """R√©cup√®re la liste des t√¢ches planifi√©es"""
        if status:
            return [task for task in self.planned_tasks if task.get("status") == status]
        return self.planned_tasks
    
    def get_task(self, task_id: str) -> Optional[Dict[str, Any]]:
        """R√©cup√®re une t√¢che sp√©cifique"""
        return next((task for task in self.planned_tasks if task["id"] == task_id), None)
    
    def update_task(self, task_id: str, updates: Dict[str, Any]) -> bool:
        """Met √† jour une t√¢che planifi√©e"""
        task = self.get_task(task_id)
        if not task:
            return False
        
        try:
            # Mettre √† jour les champs
            for key, value in updates.items():
                if key in ["name", "description", "enabled", "max_executions"]:
                    task[key] = value
            
            # Si la planification change, replanifier
            if "schedule_config" in updates:
                task["schedule_config"] = updates["schedule_config"]
                
                # Supprimer l'ancienne planification
                schedule.clear(task_id)
                
                # Replanifier
                if task["schedule_type"] == "datetime":
                    self._schedule_datetime_task(task)
                elif task["schedule_type"] == "recurring":
                    self._schedule_recurring_task(task)
                elif task["schedule_type"] == "seasonal":
                    self._schedule_seasonal_task(task)
            
            self._save_tasks()
            return True
            
        except Exception as e:
            logger.error(f"Erreur lors de la mise √† jour de la t√¢che: {e}")
            return False
    
    def delete_task(self, task_id: str) -> bool:
        """Supprime une t√¢che planifi√©e"""
        task = self.get_task(task_id)
        if not task:
            return False
        
        try:
            # Supprimer la planification
            schedule.clear(task_id)
            
            # Supprimer de la liste
            self.planned_tasks = [t for t in self.planned_tasks if t["id"] != task_id]
            self._save_tasks()
            
            logger.info(f"‚úÖ T√¢che '{task['name']}' supprim√©e avec succ√®s")
            return True
            
        except Exception as e:
            logger.error(f"Erreur lors de la suppression de la t√¢che: {e}")
            return False
    
    def enable_task(self, task_id: str) -> bool:
        """Active une t√¢che d√©sactiv√©e"""
        return self.update_task(task_id, {"enabled": True})
    
    def disable_task(self, task_id: str) -> bool:
        """D√©sactive une t√¢che"""
        return self.update_task(task_id, {"enabled": False})
    
    def get_stats(self) -> Dict[str, Any]:
        """R√©cup√®re les statistiques du planificateur"""
        total_tasks = len(self.planned_tasks)
        enabled_tasks = len([t for t in self.planned_tasks if t.get("enabled", True)])
        completed_tasks = len([t for t in self.planned_tasks if t.get("status") == "completed"])
        error_tasks = len([t for t in self.planned_tasks if t.get("status") == "error"])
        
        return {
            "total_tasks": total_tasks,
            "enabled_tasks": enabled_tasks,
            "completed_tasks": completed_tasks,
            "error_tasks": error_tasks,
            "scheduler_running": self.scheduler_running
        }
    
    def stop_scheduler(self):
        """Arr√™te le planificateur"""
        self.scheduler_running = False
        schedule.clear()
        logger.info("üõë Planificateur de t√¢ches arr√™t√©")

# Instance globale de l'agent planificateur
planner_agent = PlannerAgent()
